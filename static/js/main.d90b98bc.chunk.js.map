{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","_ref","totalCounters","react_default","a","createElement","className","href","Counter","this","state","tags","length","map","tag","key","_this","console","log","props","getBadgeClasses","formatCount","onClick","onIncrement","counter","onDelete","id","classes","value","count","Component","Counters","_this$props","onReset","counters","components_counter","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleIncrement","toConsumableArray","index","indexOf","objectSpread","setState","handleReset","c","handleDelete","counterId","filter","Fragment","navbar","components_counters","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d90b98bc.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n// Stateless Functional Component\n\nconst NavBar = ({ totalCounters }) => {\n    return ( <nav className=\"navbar navbar-light bg-light\">\n    <a className=\"navbar-brand\" href=\"#\">\n    Navbar <span className=\"badge badge-pill badge-secondary\">\n    {totalCounters}\n    </span>\n    \n    </a>\n  </nav> );\n\n}\n \nexport default NavBar;","import React, { Component } from 'react';\n\nclass Counter extends Component {\n    // state = {\n    //     value: this.props.counter.value\n\n    //  };\n\n    //  constructor(){\n    //      super();\n    //      this.handleIncrement = this.handleIncrement.bind(this);\n    //  }\n\n    //  handleIncrement = () => {\n    //      this.setState({ count: this.state.value + 1 });\n    //  }\n\n     renderTags() {\n\n        if (this.state.tags.length === 0) return null;\n\n        return <ul>{ this.state.tags.map(tag => <li key = { tag }>{ tag }</li>) }</ul>\n\n     }\n\n\n\n\n    render() { \n        console.log(this.props)\n        return (\n        <div>\n            <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\n            <button \n            onClick={() => this.props.onIncrement(this.props.counter)} \n            className=\"btn btn-secondary btn-sm\">Increment\n            </button>\n\n            <button \n            onClick={() => this.props.onDelete(this.props.counter.id)} \n            className=\"btn btn-danger btn-sm m-2\"\n            >Delete\n            </button>\n        </div>\n        )}\n    getBadgeClasses() {\n        let classes = \"badge m-2 badge-\";\n        classes += (this.props.counter.value === 0) ? \"warning\" : \"primary\";\n        return classes;\n    }\n\n    formatCount(){\n        const { count } = this.props.counter;\n        return count === 0 ? 'Zero' : count;\n    }\n    }\n \nexport default Counter;","import React, { Component } from 'react';\nimport Counter from './counter'\n\nclass Counters extends Component {\n \n\n    render() { \n\n        const { onReset, counters, onDelete, onIncrement } = this.props\n        return ( \n        <div>\n            <button \n            onClick={onReset} \n            className=\"btn btn-primary btn-sm m-2\">Reset</button>\n            { counters.map(counter => ( <Counter \n            key={counter.id}\n            onDelete={onDelete}\n            onIncrement={onIncrement}\n            counter={counter}\n            />))}\n        </div> );\n    }\n}\n \nexport default Counters;","import React, { Component } from 'react';\nimport NavBar from './components/navbar'\nimport './App.css';\nimport Counters from './components/counters'\n\nclass App extends Component {\n  state = {\n    counters: [\n        { id: 1, value: 4},\n        { id: 2, value: 0},\n        { id: 3, value: 0},\n        { id: 4, value: 0}\n    ]\n}\n\nconstructor() {\n  super()\n  console.log('App - Constructor')\n}\n\nhandleIncrement = counter => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter)\n    counters[index] = {...counter}\n    counters[index].value++;\n    this.setState({ counters })\n}\n\nhandleReset = () => {\n    const counters = this.state.counters.map(c => {\n        c.value = 0\n        return c\n    })\n    this.setState({ counters })\n}\n\nhandleDelete = counterId => {\n    const counters = this.state.counters.filter(c => c.id !== counterId)\n    this.setState({ counters })\n}\n\n  render() {\n    return (\n      <React.Fragment>\n      <NavBar totalCounters={this.state.counters.filter(c => c.value >0).length} />\n      <main className=\"container\">\n      <Counters \n      counters = {this.state.counters}\n      onReset={this.handleReset}\n      onIncrement={this.handleIncrement}\n      onDelete={this.handleDelete} />\n      </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}