{"version":3,"sources":["App.js","serviceWorker.js","components/counter.jsx","components/counters.jsx","index.js","logo.svg"],"names":["Component","Boolean","window","location","hostname","match","Counter","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","count","tags","handleIncrement","product","console","log","setState","bind","assertThisInitialized","length","react_default","a","createElement","map","tag","key","className","getBadgeClasses","formatCount","classes","Counters","counters","id","value","counter","components_counter","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"mRAIkBA,YCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4ECiCSC,cA3CV,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAPLI,MAAQ,CACJC,MAAO,EACPC,KAAM,CAAC,OAAO,OAAO,SAIXT,EAKbU,gBAAkB,SAAAC,GACdC,QAAQC,IAAIF,GACZX,EAAKc,SAAS,CAAEN,MAAOR,EAAKO,MAAMC,MAAQ,KAL1CR,EAAKU,gBAAkBV,EAAKU,gBAAgBK,KAArBd,OAAAe,EAAA,EAAAf,QAAAe,EAAA,EAAAf,CAAAD,KAFdA,4EAYV,OAA+B,IAA3BG,KAAKI,MAAME,KAAKQ,OAAqB,KAElCC,EAAAC,EAAAC,cAAA,UAAMjB,KAAKI,MAAME,KAAKY,IAAI,SAAAC,GAAG,OAAIJ,EAAAC,EAAAC,cAAA,MAAIG,IAAQD,GAAQA,uCAQ5D,OACAJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMI,UAAWrB,KAAKsB,mBAAoBtB,KAAKuB,eAC/CR,EAAAC,EAAAC,cAAA,UAEAI,UAAU,4BAFV,wDAOJ,IAAIG,EAAU,mBAEd,OADAA,GAAiC,IAArBxB,KAAKI,MAAMC,MAAe,UAAY,gDAIzC,IACDA,EAAUL,KAAKI,MAAfC,MACR,OAAiB,IAAVA,EAAc,OAASA,SA9ChBf,aCkBPmC,6MAfXrB,MAAQ,CACJsB,SAAU,CACN,CAAEC,GAAI,EAAGC,MAAO,GAChB,CAAED,GAAI,EAAGC,MAAO,GAChB,CAAED,GAAI,EAAGC,MAAO,GAChB,CAAED,GAAI,EAAGC,MAAO,6EAIpB,OAASb,EAAAC,EAAAC,cAAA,WACHjB,KAAKI,MAAMsB,SAASR,IAAI,SAAAW,GAAO,OAAId,EAAAC,EAAAC,cAACa,EAAD,CAASV,IAAKS,EAAQF,eAXhDrC,aCKvByC,IAASC,OAAOjB,EAAAC,EAAAC,cAACS,EAAD,MAAcO,SAASC,eAAe,SHyHhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCInInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.1659714e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nclass Counter extends Component {\n    state = {\n        count: 0,\n        tags: ['tag1','tag2','tag3']\n       \n     };\n\n     constructor(){\n         super();\n         this.handleIncrement = this.handleIncrement.bind(this);\n     }\n\n     handleIncrement = product => {\n         console.log(product)\n         this.setState({ count: this.state.count + 1 });\n     }\n\n     renderTags() {\n\n        if (this.state.tags.length === 0) return null;\n\n        return <ul>{ this.state.tags.map(tag => <li key = { tag }>{ tag }</li>) }</ul>\n\n     }\n\n\n\n\n    render() { \n        return (\n        <div>\n            <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\n            <button \n            // onClick={ () => this.handleIncrement(product)} \n            className=\"btn btn-secondary btn-sm\">Increment\n            </button>\n        </div>\n        )}\n    getBadgeClasses() {\n        let classes = \"badge m-2 badge-\";\n        classes += (this.state.count === 0) ? \"warning\" : \"primary\";\n        return classes;\n    }\n\n    formatCount(){\n        const { count } = this.state;\n        return count === 0 ? 'Zero' : count;\n    }\n    }\n \nexport default Counter;","import React, { Component } from 'react';\nimport Counter from './counter'\n\nclass Counters extends Component {\n    state = {\n        counters: [\n            { id: 1, value: 0},\n            { id: 2, value: 0},\n            { id: 3, value: 0},\n            { id: 4, value: 0}\n        ]\n    }\n    render() { \n        return ( <div>\n            { this.state.counters.map(counter => <Counter key={counter.id} />)}\n        </div> );\n    }\n}\n \nexport default Counters;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport Counters from './components/counters'\n\nReactDOM.render(<Counters />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}